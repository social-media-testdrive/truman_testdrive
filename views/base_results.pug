extends ui_layout

block content
  .ui.container.mt-3.mb-3
    each questionNumber in reflectionData["questionOrder"]
      - var questionInfo = reflectionData[questionNumber];
      .ui.basic.segment.noPadding
        .ui.raised.segment.reflectionTopSegment(class=[(questionNumber == "Q1") ? undefined :  "hidden",  questionNumber])
          if questionNumber == "Q1"
            h3.ui.header.mt-2
              i.question.blue.icon
              .content
                | Reflect
          .ui.small.green.right.labeled.icon.button.reflectionSegmentButton(class="voiceover_reflection" + questionNumber.substring(1), questionNumber=questionNumber)     
            i.down.arrow.icon
            if questionNumber == "Q1"
              |   Start
            else 
              |   Next 
          .ui.basic.segment.noPadding.reflectionPromptSegment.hidden(class=questionNumber)
            if mod=="targeted" && questionNumber == "Q1"
              -const adType = user.targetedAdTopic[user.targetedAdTopic.length - 1] || 'Gaming'
              -questionInfo =  reflectionData["Q1_"+adType]
            if mod=="esteem" && questionNumber == "Q1"
              -const chosenTopic = user.esteemTopic[user.esteemTopic.length - 1] || 'Music'
              -questionInfo =  reflectionData["Q1_"+chosenTopic]
            include base_resultsQuestions
            if questionInfo["childQuestions"]
              each childQuestion in questionInfo["childQuestions"]
                -let questionInfo = reflectionData[childQuestion]
                include base_resultsQuestions
    
    .ui.warning.message.hidden.startPromptsWarning
      .header
        | Click "Start"
    .ui.warning.message.hidden.openAllPromptsWarning
      .header
        | Click "Next"
    br
    .ui.big.labeled.icon.button.results_print(onclick="onPrint()")
      i.right.arrow.icon
      |   Print your responses
    br
    .ui.big.labeled.icon.button.resultsContinueButton
      i.rocket.icon
      |   Continue

block scripts
  script.
    const reflectionData = !{JSON.stringify(reflectionData)}; // reflectionData is passed to pug file via render function in app.js
    let voiceoverMappings = {};
    for (reflectionQuestion in reflectionData){
      const files = reflectionData[reflectionQuestion]["voiceoverFiles"];
      const key = '.voiceover_reflection' + reflectionQuestion.substring(1, 2);
      const cat = {
        initialDelay: (reflectionQuestion.substring(0, 2) == "Q1") ? 0 : 500, 
        delay: 0, 
        files: files
        };
      voiceoverMappings[key] = cat;
    }
  script(src='/module_js/voiceover.js') 
  script(src='/module_js/base_results.js')
  
block styles
  link(rel='stylesheet', href='/css/results.css')